 ------
 Maven 2 Native Plugin
 ------
 Dan T. Tran
 <dantran@gmail.com>
 ------
 September 29, 2005


Examples

* Build a MSVC DLL with JNI headers generated by javah

-------------------
<project>
   ...
   <packaging>native-dll</packaging>
   
   ...

   <build>   
     <plugins>
       <plugin>
         <groupId>org.codehaus.mojo</groupId>
         <artifactId>native-maven-plugin</artifactId>
         <extensions>true</extensions>
         <configuration>
           <compilerType>msvc</compilerType>
           <compilerStartOptions>
             <compilerStartOption>/nologo /MD /W4 -O</compilerStartOption>
             <compilerStartOption>-D_WIN32_WINNT=0x0500 </compilerStartOption>
           </compilerStartOptions>
          
           <!-- tell compiler to add ${java.home}/../include and ${java.home}/../include to system include path -->
           <javahOS>win32</javahOS>
          
           <sources>
             <source>
  	       <directory> a relative directory to ${basedir} </directory>
	       <fileNames>
                 <fileName>file1.c</fileName>
                 <fileName>file2.c</fileName>
                 <fileName>...</fileName>
	       </fileNames>
             </source>
             <source>
	       <directory> a relative directory to ${basedir} </directory>
	       <fileNames>
                 <fileName>file3.c</fileName>
                 <fileName>file4.c</fileName>
                 <fileName>...</fileName>
	       </fileNames>
             </source>          
            
             <!-- additional include path -->
             <source>
	       <directory> a relative directory to ${basedir} </directory>
             </source>          

             <!-- additional system include path -->
             <source>
	       <directory> a relative directory to ${basedir} </directory>
	       <dependencyAnalysisParticipation>false</dependencyAnalysisParticipation>
             </source>          
           </sources>

           <!-- deploy the accompany .lib file as well -->          
           <linkerSecondaryOuputExtensions>lib</linkerSecondaryOuputExtensions >
          
           <linkerStartOptions>
             <linkerStartOption>/nologo /INCREMENTAL:NO /DLL user32.lib advapi32.lib oldnames.lib kernel32.lib </linkerStartOption>
           </linkerStartOptions>
         </configuration>
        
         <!-- Generate JNI header files based on a list of class name on the classpath -->
         <!-- The generated include directory is automatically added to include path at compile phase -->
         <!-- Ensure to have appropriate denpendency jar file(s) in your pom -->
         <executions>
           <execution>
             <id>javah</id>
             <phase>generate-sources</phase>
             <configuration>
               <classNames>
                 <className>class1</className>
                 <className>class2</className>
                 <className>...</className>
               </classNames>
             </configuration>
             <goals>
               <goal>javah</goal> 
             </goals>
           </execution>
                    
         </executions>
        
    </build>
    
    
</project>
-------------------

  
  
  


