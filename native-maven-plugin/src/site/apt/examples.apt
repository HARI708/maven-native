 ------
 Maven 2 Native Plugin
 ------
 Dan T. Tran
 <dantran@gmail.com>
 ------
 September 29, 2005


Examples

* Build a MSVC DLL with JNI headers generated by javah

-------------------
<project>
   ...
   <packaging>dll</packaging>
   
   ...

   <build>   
     <plugins>
       <plugin>
         <groupId>org.codehaus.mojo</groupId>
         <artifactId>native-maven-plugin</artifactId>
         <extensions>true</extensions>
         <configuration>
           <compilerType>msvc</compilerType>
           <compilerStartOptions>
             <compilerStartOption>/nologo /MD /W4 -O</compilerStartOption>
             <compilerStartOption>-D_WIN32_WINNT=0x0500 </compilerStartOption>
           </compilerStartOptions>
          
           <!-- 
            | Add jdk include directories to system include path
            | Override ${jkdIncludePath} If your jdk does not conform to Sun JDK layout
            -->
           <javahOS>win32</javahOS>
          
           <sources>
             <source>
               <directory> a relative directory to ${basedir} </directory>
               <fileNames>
                 <fileName>file1.c</fileName>
                 <fileName>file2.c</fileName>
                 <fileName>...</fileName>
               </fileNames>
             </source>
             <source>
               <directory> a relative directory to ${basedir} </directory>
               <fileNames>
                 <fileName>file3.c</fileName>
                 <fileName>file4.c</fileName>
                 <fileName>...</fileName>
               </fileNames>
             </source>          
            
             <!-- additional include path -->
             <source>
               <directory>a relative directory to ${basedir} </directory>
             </source>          

             <!-- additional system include path -->
             <source>
               <directory> a relative directory to ${basedir} </directory>
               <dependencyAnalysisParticipation>false</dependencyAnalysisParticipation>
             </source>          
           </sources>

           <!-- deploy the accompany .lib file as well -->          
           <linkerSecondaryOuputExtensions>lib</linkerSecondaryOuputExtensions >
          
           <linkerStartOptions>
             <linkerStartOption>/nologo /INCREMENTAL:NO /DLL user32.lib advapi32.lib oldnames.lib kernel32.lib </linkerStartOption>
           </linkerStartOptions>
         </configuration>
        
         <!-- Generate JNI header files based on a list of class name on the classpath -->
         <!-- The generated include directory is automatically added to include path at compile phase -->
         <!-- Ensure to have appropriate denpendency jar file(s) in your pom -->
         
         <executions>
           <execution>
             <id>javah</id>
             <phase>generate-sources</phase>
             <configuration>
               <classNames>
                 <className>class1</className>
                 <className>class2</className>
                 <className>...</className>
               </classNames>
               <!-- 
                |   Note: 
                |    1. Without classNames, javah mojo will search for all JNI classes 
                |       in your dependency list.
               -->
             </configuration>
             <goals>
               <goal>javah</goal> 
             </goals>
           </execution>
                    
         </executions>
        
    </build>
    
    
</project>
-------------------

  Note:
  
  * User is responsible to provide all neccessary compiler and  linker options
  
  * msvc provider can be replaced with msvc6, msvc2003, etc so that this plugin will
    automatically setup the environment such as path, predefine include, lib paths
    recommending by msvc compilers.  This feature is extremely useful when you need to 
    use various compilers in you build system and it is impossible to set up single
    global environment to accomodate all compilers.
  
  
  
  


