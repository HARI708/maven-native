 ------
 Maven 2 Native Plugin
 ------
 Dan T. Tran
 <dantran@gmail.com>
 ------
 September 29, 2005

Introduction

  This is a plugin that allows to compile c and c++ code under maven 2 with different 
  compilers such as gcc, msvc, bcc, ... 

How to use

  Here is step by step instructions:
  
  * Determine your packaging type 
  
  * Dertermine your dependencies
  
  * Determine your compiler provider
  
  * Determine your compiler options and flags
  
  * Determine your source directories and its source files
  
  * Determine your linker provider
  
  * Determine your linker options and flags
  
  * Determine your secondary deployable artifact
  
  
  
Examples

* Build a MSVC DLL project with JNI headers generated by javah at generate-sources phase

-------------------
<project>
   ...
   <packaging>native-dll</packaging>
   
   ...

   <build>   
     <plugins>
       <plugin>
         <groupId>org.codehaus.mojo</groupId>
         <artifactId>native-maven-plugin</artifactId>
         <configuration>
            <compilerType>msvc6</compilerType>
            <compilerStartOptions>
              <compilerStartOption>/nologo /MD /W4 -O</compilerStartOption>
              <compilerStartOption>-D_WIN32_WINNT=0x0500 </compilerStartOption>
            </compilerStartOptions>
          
            <!-- tell compiler to add ${java.home}/../include and ${java.home}/../include to system include path -->
            <javahOS>win32</javahOS>
          
            <sources>
              <source>
  	      <directory> a relative directory to ${basedir} </directory>
	      <fileNames>
                <fileName>file1.c</fileName>
                <fileName>file2.c</fileName>
                <fileName>...</fileName>
	      </fileNames>
            </source>
            <source>
	      <directory> a relative directory to ${basedir} </directory>
	      <fileNames>
                <fileName>file3.c</fileName>
                <fileName>file4.c</fileName>
                <fileName>...</fileName>
	      </fileNames>
            </source>          
            
            <!-- additional include path -->
            <source>
	      <directory> a relative directory to ${basedir} </directory>
            </source>          

            <!-- additional system include path -->
            <source>
	      <directory> a relative directory to ${basedir} </directory>
	      <dependencyAnalysisParticipation>false</dependencyAnalysisParticipation>
            </source>          

          </sources>
          
          <linkerSecondaryOuputExtensions>lib</linkerSecondaryOuputExtensions >
          
          <linkerStartOptions>
            <linkerStartOption>/nologo /INCREMENTAL:NO /DLL user32.lib advapi32.lib oldnames.lib kernel32.lib </linkerStartOption>
          </linkerStartOptions>
        </configuration>
        
        <!-- Generate JNI header files based on a list of class name on the classpath -->
        <!-- The generated include directory is automatically added to include path at compile phase -->
        <executions>
          <execution>
            <id>javah</id>
            <phase>generate-sources</phase>
            <configuration>
              <classNames>
                <className>class1</className>
                <className>class2</className>
                <className>...</className>
              </classNames>
            </configuration>
            <goals>
              <goal>javah</goal> 
            </goals>
          </execution>
                    
        </executions>
        
    </build>
    
    
</project>
-------------------

  
  
  


