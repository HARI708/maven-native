 ------
 Native Maven Plugin: Usage
 ------
 Dan T. Tran
 <dantran@gmail.com>
 ------
 September 29, 2005

Usage

  Here is step by step instructions:
  
  * Determine your packaging type 
  
  * Determine your linker dependencies
  
  * Configure your build and plugin header.
    
  * Determine your source directories and its source files
  
  * Determine your compiler and linker providers
  
  * Determine your compiler and linker options and flags  
  
  * Determine your system environment factory
  
  []
  
* Packaging Type

  Native plugin supports the following packing type:

  * dll
  
  * exe
  
  * lib
  
  * a
  
  * o
  
  * so
  
  * sl
  
  * dylib
  
  * jnilib
  
  * uexe
  
  []
  
  One of these packaging types will go into the your pom.xml's packaging element.
  
  The native build lifecyle uses packaging type as the extension of 
  the build artifact( ie dll, exe, lib, etc ). However, it has no detailed knowledge 
  to build each specific extension.  You must configure appropriate compiler/linker 
  options at build phase. See Compiler Option.
  
  "uexe" is a place holder for executable without extension name usually found
  on UNIX environment.  The final artifact will have extension of "uexe".  You will need 
  to remove the extension yourself at assembly time (see maven-assembly-plugin).
  
  Since this plugin uses its own lifecycle, you need to enable plugin's <extensions> to true
  
  Here is example of declaring your packaging type and plugin header
  
----------------------
  
  <project>
   ...
   <packaging>so</packaging>
   ...
   <build>   
     <plugins>
       <plugin>
         <groupId>org.codehaus.mojo</groupId>
         <artifactId>native-maven-plugin</artifactId>
         <extensions>true</extensions>
         <configuration>
         </configuration>
       </plugin>
     </plugins>
   </build>
----------------------
  
* Setup your build and plugin header

  Since this plugin uses its own lifecycle, you need to enable plugin's <extensions> to true
  
  Here is example of declaring your packaging type and plugin header
  
    
* Dependencies

    * Dependencies with type "lib", "so" and "a", "sl", "jnilib", "dylib" "o", and "obj" 
      will be linked to final artifact at link step.
      
    * You can explicitly add linker dependencies through normal linker option.
    
    []
    
    Internally, this plugin copies all dependencies to ${project.build.directory}/lib
    without the version tag.  
    
    The following examples show 2 .so dependency files to be linked to the final output
    file.
  
----------------------
  
  <project>
   ...
   <dependencies>
     <dependency>
       <groupId>someGroup</groupId>
       <artifactId>someId</artifactId>
       <version>someVersion</version>
       <type>so</type>
     </dependency>
     <dependency>
       <groupId>someGroup</groupId>
       <artifactId>someId2</artifactId>
       <version>someVersion<version>
       <type>so</type>
     </dependency>
   </dependencies>
   
----------------------   
   
     
* Source Directories and Files  

  Include paths and source files must be configured using Sources configuration.  

------------------------

   <build>   
     <plugins>
       <plugin>
         <groupId>org.codehaus.mojo</groupId>
         <artifactId>native-maven-plugin</artifactId>
         <extensions>true</extensions>
         <configuration>
           .....
           <sources>
             <source>
               <-- relative to your project directory -->
               <directory>../src/main/native</directory>
               <fileNames>
                 <fileName>file1.c</fileName>
                 <fileName>file2.c</fileName>
                 <fileName>...</fileName>
               </fileNames>
             </source>
             <source>
               <directory>src/main/native</directory> 
               <fileNames>
                 <fileName>file3.c</fileName>
                 <fileName>file4.c</fileName>
                 <fileName>...</fileName>
               </fileNames>
             </source>          
            
             <!-- additional include path -->
             <source>
               <directory>...</directory>
             </source>          

             <!-- additional system include path -->
             <source>
               <directory>...</directory>
               <dependencyAnalysisParticipation>false</dependencyAnalysisParticipation>
             </source>          
           </sources>
           ....         
         </configuration>
       </plugin>
     </plugins>
   </build>
------------------------

* Compiler/Linker Provider

  If you are on a UNIX system, use the default "generic", or "generic-classic" but overwrite 
  compilerExecutable and linkerExecutable configuration specific to 
  your build. Default values for both generic compiler and linker are "gcc".
  Makesure the executables are on your path.
  
  On Windows, use Windows supported compiler and linker such as "msvc" and "bcc"
  
  Each provided compiler/linker provider assumes minimal knowledge of available options.
  The following contains a list of options that will be automatically added your
  options:
  
    * /c for all compilers
    
    * Output options such as "-o" for generic compiler/linker,  "-Fo" for msvc compiler, 
      and "/out:" msvc linker, etc. 
      
    []
  
* Compiler/Linker options and flags 

  You are responsible to provide compiler/linker options except those already included by
  your compiler/linker providers ( see previous bullet )

* System Environments

  Optionally, you can configure <EnvFactoryName> to apply a set of known environment
  variables to each command line produced by compiler/linker provider. 
 
  
  

